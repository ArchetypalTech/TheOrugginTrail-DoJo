
//*
//*
//* MeaCulpa (mc) 2024 lbdl | itrainspiders
//*

#[cfg(test)]
mod tests {
     use core::clone::Clone;
    use core::array::ArrayTrait;
    // import world dispatcher
    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};
    // import test utils
    use dojo::utils::test::{deploy_contract, spawn_test_world};

    use the_oruggin_trail::lib::hash_utils::hashutils as h_util;

    use the_oruggin_trail::systems::{
        meatpuppet::{meatpuppet, IListenerDispatcher, IListenerDispatcherTrait},
        spawner::{spawner, ISpawnerDispatcher, ISpawnerDispatcherTrait}
    };

    use the_oruggin_trail::{
        constants::zrk_constants::{roomid as rm, roomid_to_str as rts},
        models::{
            txtdef::{Txtdef, txtdef}, room::{Room, room},
            action::{Action, action},
            object::{Object, object},
            output::{Output, output},
            player::{Player, player},
            zrk_enums::{MaterialType, ActionType, ObjectType, DirectionType, RoomType}
        },
        lib::hash_utils::hashutils as p_hash
    };

    use the_oruggin_trail::tests::test_rig::{
        test_rig,
        test_rig::{Systems, ZERO, OWNER, OTHER}
    };
    

    /// Handling for Move
    /// 
    /// we want to test that move commands are correcly parsed and then
    /// the players is moved into the correct room and the correct output
    /// is generated by the system
    ///  
    /// west should take us to the plain from the pass
    #[test]
    #[available_gas(200000000)]
    fn test_move_west_from_pass() {
        // let caller = starknet::contract_address_const::<0x0>();
        let sys: Systems = test_rig::setup_world();
        let pid: felt252 = 23;

        let rm_name: ByteArray = rts(rm::PASS);
        let rm_id = h_util::str_hash(@rm_name);

        let expected_rm_name: ByteArray = rts(rm::PLAIN);
        let expected_rm_id = h_util::str_hash(@expected_rm_name);

        let sp: ISpawnerDispatcher = sys.spawner;
        sp.setup();
        sp.spawn_player(23, rm_id);

        let mp: IListenerDispatcher = sys.listener;

        let input: Array<ByteArray> = array!["go", "west"];
        mp.listen(input, pid);

        let expected_desc: ByteArray = "bensons plain\nYou are standing on a plain on the prarie";

        let output = get!(sys.world, 23, (Output));
        let actual = output.text_o_vision;
        assert_eq!(expected_desc, actual, "Expected {:?} got {:?}", expected_desc, actual);

        let pl: Player = get!(sys.world, 23, (Player));
        let curr_rm_id = pl.location.clone();
        assert_eq!(expected_rm_id, curr_rm_id, "Expected {:?} got {:?}", expected_rm_id, curr_rm_id );
    }

    /// moving east
    /// 
    /// should fail
    /// 
    /// we have no west right now we really should have a better error
    /// but for now we will just get a fail
    #[test]
    #[available_gas(200000000)]
    fn test_move_east_from_pass() {
        let sys: Systems = test_rig::setup_world();
        let pid: felt252 = 23;

        let rm_name: ByteArray = rts(rm::PASS);
        let rm_id = h_util::str_hash(@rm_name);

        let expected_rm_name: ByteArray = rts(rm::PASS);
        let expected_rm_id = h_util::str_hash(@expected_rm_name);

        let sp: ISpawnerDispatcher = sys.spawner;
        sp.setup();
        sp.spawn_player(23, rm_id);

        let mp: IListenerDispatcher = sys.listener;

        let input: Array<ByteArray> = array!["go", "east"];
        mp.listen(input, pid);

        let expected_desc: ByteArray = "no. you cannot go that way.\n\"reasons\" mumbles shoggoth into his hat\n she seems to be waving a hand shaped thing";

        let output = get!(sys.world, 23, (Output));
        let actual = output.text_o_vision;
        assert_eq!(expected_desc, actual, "Expected {:?} got {:?}", expected_desc, actual);

        let pl: Player = get!(sys.world, 23, (Player));
        let curr_rm_id = pl.location.clone();
        assert_eq!(expected_rm_id, curr_rm_id, "Expected {:?} got {:?}", expected_rm_id, curr_rm_id );
    }
    
    /// moving west from barn to forge
    /// 
    /// should fail because the window is !enabled
    #[test]
    #[available_gas(200000000)]
    fn test_move_west_from_barn() {
        let sys: Systems = test_rig::setup_world();
        let pid: felt252 = 23;

        let rm_name: ByteArray = rts(rm::BARN);
        let rm_id = h_util::str_hash(@rm_name);

        let sp: ISpawnerDispatcher = sys.spawner;
        sp.setup();
        sp.spawn_player(23, rm_id);

        let mp: IListenerDispatcher = sys.listener;

        let input: Array<ByteArray> = array!["go", "west"];
        mp.listen(input, pid);

        let expected_desc: ByteArray = "no. you cannot go that way.\n\"reasons\" mumbles shoggoth into his hat\n she seems to be waving a hand shaped thing";

        let output = get!(sys.world, 23, (Output));
        let actual = output.text_o_vision;
        assert_eq!(expected_desc, actual, "Expected {:?} got {:?}", expected_desc, actual);
    }
}
