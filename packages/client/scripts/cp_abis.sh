#!/usr/bin/env bash
# This script copies over the contract ABI json files generated by the sozo build
# process. It is intended as part of a local deployment build pipeline. It needs
# further work to make it a part of a remote deployment because we dont make any
# consideration about dev and production build here albeit this probably doesnt matter
# as the generated contracts are themselves env agnostic.
# The distinction that makes a difference is the manifest json and toml files that we
# also copy over as part of this script.
# These files contain world anc contract adresses that we later need to setup the network
# calls, themeselves JSONRPC calls and GQl subscriptions 

set -euo pipefail

# Change the current working directory to the parent directory of the script
pushd "$(dirname "$0")/.." >/dev/null

# set some defaults
# your likely going to want to change this to reflect your own setup
# some thing like: /path/to/the/root/of/your/dojo_project
base_contract_src="../tot"
base_contract_dest="src/manifest"
base_manifest_dest="src/manifest/dev"

function usage() {
    echo "Usage: $0 [-h] [-c arg] [-d local_dest]  <contracts_project_path>"
    echo "If present the env vars DOJO_PROJ and FE_DEST will be used"
    echo "If <contracts_project_path> is passed then this will override the DOJO_PROJ var if present"
    echo "If -d flag is passed then this will override the FE_DEST env var if present."
    echo "where FE_DEST is the destination for the contract manifest files"
    echo "FE_DEST defaults to src/manifest"
    echo "If neither is passed then display this help message"
    echo "  -h  Display this help message."
    echo "  -c  Specify a commit hash to use to compare manifests against"
    echo "      This value is read by default from a .chash file if present"
    echo "      Otherwise versions are ignored and all manifest files will"
    echo "      be copied"
    echo "  -d  Specify a destination for the contract manifest files. Sets/overrides SV_DEST"
}

while getopts "hc:d:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        c)
            c_hash="${OPTARG}"
            ;;       
        d)
            d_path="${OPTARG}"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
    esac
done

# Remove processed options from the positional parameters
shift $((OPTIND-1))

function err_handler() {
  popd >/dev/null
  echo "Command $1 failed: $2"
  echo "Shoggoth enters the room, puzzled by human folly it watches your world fade..."
  exit 1
}

function set_env() {
    if [ "${DOJO_PROJ+set}" = "set" ]; then
        if [ -n "$DOJO_PROJ" ]; then
            echo "DOJO_PROJ: $DOJO_PROJ"
        else
            echo "DOJO_PROJ is set but empty."
        fi
    else
        echo "DOJO_PROJ is not set and no dojo project path passed"
        echo "Searching for project @ $(pwd)/../tot/"
        dojo_targ=$(find ../tot -type d -name "target")
        dojo_dep=$(find "$dojo_targ" -type d -name "dev")
        DOJO_PROJ=$(find "$dojo_dep" -type d -name "dev")
    fi

    if [[ ! -z "$DOJO_PROJ" ]]; then
        echo "Found cairo project at $DOJO_PROJ"
    else
         err_handler "find cairo project $DOJO_PATH" "path not found"
    fi
}

function set_local_dest() {
    # have we set the -d flag? 
    if [[ ! -z $d_path ]]; then
        FE_DEST=$d_path
        echo "Using -d $d_path option for systems: $FE_DEST"
    fi

    # have we set an ENV var?
    if [ -z "${d_path}" ] && [ -n "${FE_DEST}" ]; then
        FE_DEST=$FE_DEST
        echo "Using ENV FE_DEST for systems: $FE_DEST"
    fi

    # use the default
    if [ -z $d_path ] && [ -z $FE_DEST ]; then
        FE_DEST=$base_contract_dest
        echo "Using default destination for systems: $FE_DEST"
    fi
    
    if [[ ! -e $FE_DEST ]]; then
            err_handler "find: $FE_DEST" "file not found"
        fi
}

# we need the manifest.json file as well so we can pull out comntract addresses we may wish to call
# mainly for us right now this is just the world contract
function mv_manifest() {
    echo "Searching for manifest root at $1"
    manifest_json=$(find "$1/manifests" -type f -name "manifest.json")
    manifest_toml=$(find "$1/manifests" -type f -name "manifest.toml")
    if [[ -e "$manifest_json" ]] && [[ -e "$manifest_toml" ]]; then
        echo "Copy manifest $manifest_json"
        echo "Copy manifest $manifest_toml"
        cp $manifest_json $base_manifest_dest
        cp $manifest_toml $base_manifest_dest
    else
        echo "json: $manifest_json"
        echo "toml: $manifest_toml"
        err_handler "Copy manifest files" "Failed"
    fi
}


# we dont interact directly with models because the world store takes
# care of that so we only need systems for the front end to be able to
# use the contract ABI's
# we assume dev as the target, this may need to be amended
function mv_systems() {
    echo "Searching for abi root at $1"
    readarray -t systems < <(find "$1/target/dev/contracts" -type f -name "the_oruggin_trail-*-*.json")

    # set the local path
    set_local_dest

    # Iterate over the array
    for file in "${systems[@]}"; do
        echo "Process file: $file"
        f_path="${file##*/}"
        f_name=$(transform_filename "$file")
        # copy the files into the local project
        cp "${file}" "${FE_DEST}/${f_name}"
    done
}

function transform_filename() {
    local file="$1"
    # Extract the base name
    local base=$(basename "$file")
    # Remove the prefix and hash
    local name=${base#the_oruggin_trail-}
    name=${name%-*}
    # Construct the new filename
    echo "system_${name}.json"
}


function run() {
    if [ -z "$1" ]; then
        # we didnt get passed anything as an arg so we just use some
        # default values to find the src and dst paths
        set_env
    else
        mv_systems $1
        mv_manifest $1
    fi
}

# handle non optional command args
# and locate some files or die fools...
# Shoggoth enters the room and watches you die, it looks puzzled by your foolishness
set +u
run "$@"
set -u